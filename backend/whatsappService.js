const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const QRCode = require('qrcode');

class WhatsAppService {
  constructor() {
    this.client = null;
    this.isReady = false;
    this.qrCode = null;
    this.qrCodeImage = null; // Para almacenar la imagen base64 del QR
    this.isInitializing = false;
    this.lastQRGenerated = null;
    this.sessionExpired = false;
    this.initializationAttempts = 0;
    this.maxAttempts = 3;
  }

  async initialize() {
    if (this.isInitializing) {
      return { success: false, message: 'Ya se est√° inicializando WhatsApp' };
    }

    if (this.client && this.isReady) {
      return { success: true, message: 'WhatsApp ya est√° conectado', status: this.getStatus() };
    }

    this.isInitializing = true;
    this.initializationAttempts++;

    if (this.initializationAttempts > this.maxAttempts) {
      this.isInitializing = false;
      return { 
        success: false, 
        message: 'M√°ximo n√∫mero de intentos alcanzado. Reinicia el servidor para intentar nuevamente.' 
      };
    }

    try {
      // Limpiar cliente anterior si existe
      if (this.client) {
      // Si el cliente ya est√° autenticado pero isReady sigue en false, reinicializar el cliente
      if (this.client && this.client.info && !this.isReady) {
        console.warn('[WhatsAppService] Cliente autenticado pero isReady=false. Reinicializando cliente de WhatsApp...');
        try {
          await this.client.destroy();
        } catch (e) {
          console.error('Error destruyendo cliente previo:', e);
        }
        this.client = null;
        this.isReady = false;
        this.isInitializing = false;
        this.qrCode = null;
        this.qrCodeImage = null;
        this.sessionExpired = false;
        this.initializationAttempts = 0;
        // Volver a crear el cliente y listeners
        return await this.initialize();
      }
        await this.client.destroy();
        this.client = null;
      }

      this.client = new Client({
        authStrategy: new LocalAuth({
          name: 'inventario-session'
        }),
        puppeteer: {
          headless: true,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--single-process',
            '--disable-gpu'
          ]
        }
      });

      this.client.on('qr', async (qr) => {
        console.log('\nüéØ ===============================');
        console.log('üì± C√ìDIGO QR GENERADO PARA WHATSAPP');
        console.log('üéØ ===============================');
        console.log('üìè Longitud del QR string:', qr.length);
        console.log('\nüìã INSTRUCCIONES:');
        console.log('1. Abre WhatsApp en tu tel√©fono');
        console.log('2. Ve a Configuraci√≥n ‚Üí Dispositivos vinculados');
        console.log('3. Toca "Vincular un dispositivo"');
        console.log('4. Escanea el c√≥digo QR desde el frontend o consola');
        console.log('üéØ ===============================\n');
        
        qrcode.generate(qr, { small: true });
        this.qrCode = qr;
        
        // Generar imagen base64 del QR para mostrar en el frontend
        try {
          console.log('üîÑ Generando imagen QR para frontend...');
          this.qrCodeImage = await QRCode.toDataURL(qr, {
            width: 256,
            margin: 2,
            color: {
              dark: '#000000',
              light: '#FFFFFF'
            }
          });
          console.log('‚úÖ Imagen QR generada exitosamente. Longitud:', this.qrCodeImage?.length || 0);
          console.log('üìä Disponible en: GET /api/whatsapp/status');
        } catch (error) {
          console.error('‚ùå Error generando imagen QR:', error);
          this.qrCodeImage = null;
        }
        
        this.lastQRGenerated = new Date();
        this.sessionExpired = false;
      });

      this.client.on('ready', () => {
        console.log('\nüéâ ===============================');
        console.log('‚úÖ WHATSAPP WEB EST√Å LISTO!');
        console.log('üéâ ===============================');
        this.client.info.then(info => {
          console.log(`üì± Conectado como: ${info.wid.user} (${info.pushname})`);
          console.log(`üìû Este n√∫mero enviar√° los tickets a los clientes`);
          console.log(`üöÄ Servicio listo para enviar mensajes`);
          console.log('üéâ ===============================\n');
        }).catch(err => console.error('Error obteniendo info:', err));
        // Forzar que isInitializing sea false si el cliente est√° listo
        this.isReady = true;
        this.qrCode = null;
        this.qrCodeImage = null;
        this.isInitializing = false;
        this.sessionExpired = false;
        this.initializationAttempts = 0;
        console.log('[WhatsAppService] Estado corregido: isReady=true, isInitializing=false');
      });

      this.client.on('authenticated', () => {
        console.log('‚úÖ WhatsApp Web autenticado correctamente');
        // Si por alguna raz√≥n isInitializing sigue en true, lo forzamos a false
        if (this.isInitializing) {
          console.log('[WhatsAppService] Corrigiendo isInitializing a false tras autenticaci√≥n');
          this.isInitializing = false;
        }
        this.sessionExpired = false;
      });

      this.client.on('auth_failure', (msg) => {
        console.error('\n‚ùå ===============================');
        console.error('‚ùå ERROR DE AUTENTICACI√ìN WHATSAPP');
        console.error('‚ùå ===============================');
        console.error('üì± Mensaje:', msg);
        console.error('üí° Sugerencia: Regenera la sesi√≥n desde el frontend');
        console.error('‚ùå ===============================\n');
        this.isReady = false;
        this.sessionExpired = true;
        this.isInitializing = false;
      });

      this.client.on('disconnected', (reason) => {
        console.log('\n‚ö†Ô∏è  ===============================');
        console.log('‚ö†Ô∏è  WHATSAPP WEB DESCONECTADO');
        console.log('‚ö†Ô∏è  ===============================');
        console.log('üì± Raz√≥n:', reason);
        console.log('üí° El servicio se puede reconectar desde el frontend');
        console.log('‚ö†Ô∏è  ===============================\n');
        this.isReady = false;
        this.client = null;
        this.isInitializing = false;
        this.qrCode = null;
        
        // Marcar sesi√≥n como expirada si la raz√≥n es por sesi√≥n
        if (reason === 'NAVIGATION' || reason === 'LOGOUT') {
          this.sessionExpired = true;
        }
      });

      await this.client.initialize();
      
      return { 
        success: true, 
        message: 'WhatsApp inicializando correctamente',
        status: this.getStatus()
      };

    } catch (error) {
      console.error('Error inicializando WhatsApp:', error);
      this.isInitializing = false;
      this.sessionExpired = true;
      throw error;
    }
  }

  async sendTicket(phoneNumber, ticketData) {

    console.log('--- [WhatsAppService.sendTicket] ---');
    console.log('isReady:', this.isReady);
    if (!this.client) {
      console.log('El cliente de WhatsApp no est√° inicializado (this.client es null)');
    } else {
      console.log('Estado del cliente:', {
        authenticated: this.client.info ? true : false,
        info: this.client.info || null
      });
    }
    if (!this.isReady) {
      console.log('No se puede enviar ticket porque isReady es falso.');
      console.log('sessionExpired:', this.sessionExpired);
      console.log('isInitializing:', this.isInitializing);
      throw new Error('WhatsApp no est√° conectado. Por favor, escanea el c√≥digo QR primero.');
    }

    try {
      console.log(`üì± Intentando enviar ticket a: ${phoneNumber}`);
      console.log(`üìä Datos del ticket: Cliente: ${ticketData.cliente}, Total: $${ticketData.total}`);
      
      // Formatear n√∫mero de tel√©fono siguiendo la l√≥gica que funcionaba
      let formattedNumber = phoneNumber.replace(/\D/g, ''); // Solo n√∫meros
      
      // Validar que tenga al menos 11 d√≠gitos (1 + 10 d√≠gitos)
      if (formattedNumber.length < 10) {
        throw new Error('El n√∫mero debe tener al menos 10 d√≠gitos');
      }
      
      // Si no empieza con 521, agregar el c√≥digo de pa√≠s para M√©xico
      if (!formattedNumber.startsWith('521')) {
        // Si empieza con 1, asumir que es c√≥digo de pa√≠s + n√∫mero mexicano
        if (formattedNumber.startsWith('1') && formattedNumber.length === 11) {
          formattedNumber = '52' + formattedNumber; // 52 + 1 + 10 d√≠gitos
        } else {
          // Si no tiene c√≥digo de pa√≠s, agregar 521 (M√©xico + m√≥vil)
          formattedNumber = '521' + formattedNumber;
        }
      }
      
      const chatId = formattedNumber + '@c.us';
      console.log(`üî¢ N√∫mero formateado: ${formattedNumber}, Chat ID: ${chatId}`);

      // Verificar si el n√∫mero existe en WhatsApp
      const numberExists = await this.client.isRegisteredUser(chatId);
      console.log(`‚úÖ ¬øN√∫mero registrado en WhatsApp?: ${numberExists}`);
      
      if (!numberExists) {
        throw new Error('El n√∫mero de WhatsApp no est√° registrado');
      }

      // Obtener informaci√≥n de la cuenta conectada
      const info = await this.client.info;
      console.log(`üìû Enviando DESDE el n√∫mero: ${info.wid.user} (${info.pushname})`);
      console.log(`üìû Enviando HACIA el n√∫mero: ${formattedNumber}`);

      // Generar el mensaje del ticket
      const message = this.generateTicketMessage(ticketData);

      // Enviar el mensaje
      await this.client.sendMessage(chatId, message);
      
      console.log(`‚úÖ Ticket enviado exitosamente de ${info.wid.user} hacia ${phoneNumber}`);
      return { success: true, message: 'Ticket enviado correctamente' };

    } catch (error) {
      console.error('Error enviando ticket:', error);
      throw error;
    }
  }

  generateTicketMessage(ticketData) {
    const { cliente, telefono, productos, total, metodoPago, fecha } = ticketData;
    
    let message = `üßæ *COMPROBANTE DE COMPRA*\n`;
    message += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
    
    message += `üë§ *Cliente:* ${cliente}\n`;
    if (telefono) {
      message += `ÔøΩ *Tel√©fono:* ${telefono}\n`;
    }
    message += `ÔøΩüìÖ *Fecha:* ${new Date(fecha).toLocaleDateString('es-MX', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })}\n`;
    message += `üïê *Hora:* ${new Date(fecha).toLocaleTimeString('es-MX', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    })}\n`;
    message += `üí≥ *M√©todo de Pago:* ${metodoPago.charAt(0).toUpperCase() + metodoPago.slice(1)}\n\n`;
    
    message += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    message += `ÔøΩ *PRODUCTOS ADQUIRIDOS*\n`;
    message += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
    
    productos.forEach((producto, index) => {
      message += `${index + 1}. *${producto.nombre}*\n`;
      message += `   ‚ñ™Ô∏è Cantidad: ${producto.cantidad} pza(s)\n`;
      message += `   ‚ñ™Ô∏è Precio Unitario: $${(producto.precioVenta || producto.precioUnitario || 0).toFixed(2)}\n`;
      message += `   ‚ñ™Ô∏è Subtotal: $${(producto.subtotal || (producto.cantidad * (producto.precioVenta || producto.precioUnitario || 0))).toFixed(2)}\n`;
      if (index < productos.length - 1) {
        message += `   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
      }
      message += `\n`;
    });
    
    message += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
    message += `ÔøΩ *TOTAL A PAGAR: $${total.toFixed(2)}*\n`;
    message += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
    
    message += `üéâ *¬°GRACIAS POR SU COMPRA!* üéâ\n\n`;
    message += `Esperamos que disfrute su(s) producto(s).\n`;
    message += `Su confianza en nosotros es muy importante.\n\n`;
    
    message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    message += `üìç *INFORMACI√ìN DE CONTACTO*\n`;
    message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    message += `ÔøΩ *Horario de Atenci√≥n:*\n`;
    message += `   Lunes a Viernes: 9:00 AM - 6:00 PM\n`;
    message += `   S√°bados: 9:00 AM - 2:00 PM\n`;
    message += `   Domingos: Cerrado\n\n`;
    
    message += `üìû *Soporte y Consultas:*\n`;
    if (telefono) {
      message += `   WhatsApp: ${telefono}\n`;
    }
    message += `   Respuesta en horario laboral\n\n`;
    
    message += `‚ú® *¬°Vuelva pronto!* ‚ú®\n`;
    message += `*SC - Sistema de Control de Inventario*`;
    
    return message;
  }

  getPaymentMethodText(metodoPago) {
    const methods = {
      'efectivo': 'Efectivo üíµ',
      'tarjeta': 'Tarjeta üí≥',
      'transferencia': 'Transferencia üè¶'
    };
    return methods[metodoPago] || metodoPago;
  }

  getStatus() {
    const now = new Date();
    const qrAge = this.lastQRGenerated ? (now - this.lastQRGenerated) / 1000 : null;
    
    return {
      isReady: this.isReady,
      hasQR: !!this.qrCode,
      qrCode: this.qrCode,
      qrCodeImage: this.qrCodeImage, // Incluir la imagen base64 del QR
      isInitializing: this.isInitializing,
      sessionExpired: this.sessionExpired,
      qrAge: qrAge,
      initializationAttempts: this.initializationAttempts,
      maxAttempts: this.maxAttempts,
      needsReconnection: this.sessionExpired || (!this.isReady && !this.isInitializing && !this.qrCode)
    };
  }

  async regenerateSession() {
    console.log('Regenerando sesi√≥n de WhatsApp...');
    
    try {
      // Limpiar la sesi√≥n actual
      if (this.client) {
        try {
          await this.client.logout();
          console.log('Logout de WhatsApp completado');
        } catch (logoutError) {
          console.log('Error en logout, continuando con destroy:', logoutError.message);
        }
        
        try {
          await this.client.destroy();
          console.log('Cliente WhatsApp destruido');
        } catch (destroyError) {
          console.log('Error destruyendo cliente:', destroyError.message);
        }
        
        this.client = null;
      }
      
      // Resetear variables de estado
      this.isReady = false;
      this.qrCode = null;
      this.qrCodeImage = null;
      this.isInitializing = false;
      this.sessionExpired = false;
      this.initializationAttempts = 0;
      this.lastQRGenerated = null;
      
      // Esperar un momento para que los procesos se liberen
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Limpiar archivos de sesi√≥n de manera m√°s segura para Windows
      await this.cleanSessionFiles();
      
      // Esperar otro momento antes de reinicializar
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Inicializar nuevamente
      return await this.initialize();
      
    } catch (error) {
      console.error('Error regenerando sesi√≥n:', error);
      this.sessionExpired = true;
      throw error;
    }
  }

  async disconnect() {
    if (this.client) {
      await this.client.destroy();
      this.client = null;
      this.isReady = false;
      this.qrCode = null;
      this.qrCodeImage = null;
      this.isInitializing = false;
      this.sessionExpired = false;
      this.initializationAttempts = 0;
      this.lastQRGenerated = null;
    }
  }

  async cleanSessionFiles() {
    const fs = require('fs').promises;
    const path = require('path');
    const sessionPath = path.join(__dirname, '.wwebjs_auth');
    
    try {
      // Verificar si el directorio existe
      await fs.access(sessionPath);
      
      // En Windows, intentar eliminar de manera m√°s gradual
      console.log('Intentando limpiar archivos de sesi√≥n...');
      
      // Intentar con fs.rm (m√©todo m√°s nuevo y robusto)
      try {
        await fs.rm(sessionPath, { recursive: true, force: true });
        console.log('Archivos de sesi√≥n eliminados con fs.rm');
        return;
      } catch (rmError) {
        console.log('fs.rm fall√≥, intentando m√©todo alternativo:', rmError.message);
      }
      
      // M√©todo alternativo: marcar para eliminaci√≥n y reintentar
      const tempName = `${sessionPath}_old_${Date.now()}`;
      try {
        await fs.rename(sessionPath, tempName);
        console.log('Directorio de sesi√≥n renombrado para eliminaci√≥n posterior');
        
        // Intentar eliminar en segundo plano
        setTimeout(async () => {
          try {
            await fs.rm(tempName, { recursive: true, force: true });
            console.log('Archivos de sesi√≥n eliminados de forma diferida');
          } catch (delayedError) {
            console.log('Error en eliminaci√≥n diferida (no cr√≠tico):', delayedError.message);
          }
        }, 5000);
        
      } catch (renameError) {
        console.log('Error renombrando directorio:', renameError.message);
      }
      
    } catch (accessError) {
      console.log('No hay archivos de sesi√≥n para limpiar');
    }
  }
}

// Instancia singleton
const whatsappService = new WhatsAppService();

module.exports = whatsappService;
